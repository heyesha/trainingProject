<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TrainingProject.Api</name>
    </assembly>
    <members>
        <member name="M:TrainingProject.Api.Controlers.AuthController.Register(TrainingProject.Domain.Dto.User.RegisterUserDto)">
            <summary>
            Регистрация пользователя
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:TrainingProject.Api.Controlers.AuthController.Login(TrainingProject.Domain.Dto.User.LoginUserDto)">
            <summary>
            Логин пользователя
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:TrainingProject.Api.Controlers.RoleController.Create(TrainingProject.Domain.Dto.Role.CreateRoleDto)">
            <summary>
            Создание роли с указанием названия
            </summary>
            <param name="dto"></param>
            <returns></returns>
            <remarks>
            Sample request:
            
                POST
                {
                    "name": "User"
                {
            </remarks>
            <response code="200:">Если роль создалась</response>
            <response code="400:">Если роль не была создана</response>
        </member>
        <member name="M:TrainingProject.Api.Controlers.RoleController.Delete(System.Int64)">
            <summary>
            Удаление роли с указанием идентификатора
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            Sample request:
            
                DELETE
                {
                    "id": 1
                {
            </remarks>
            <response code="200:">Если роль удалена</response>
            <response code="400:">Если роль не была удалена</response>
        </member>
        <member name="M:TrainingProject.Api.Controlers.RoleController.Update(TrainingProject.Domain.Dto.Role.RoleDto)">
            <summary>
            Обновление роли с указанием идентификатора и названия
            </summary>
            <param name="dto"></param>
            <returns></returns>
            <remarks>
            Sample request:
            
                PUT
                {
                    "id": 1,
                    "name": "Admin"
                {
            </remarks>
            <response code="200:">Если роль обновилась</response>
            <response code="400:">Если роль не была обновлена</response>
        </member>
        <member name="M:TrainingProject.Api.Controlers.RoleController.AddRoleForUser(TrainingProject.Domain.Dto.Role.UserRoleDto)">
            <summary>
            Добавление роли пользователю
            </summary>
            <param name="dto"></param>
            <returns></returns>
            <remarks>
            Request for create role for user:
            
                POST
                {
                    "login": "User #1",
                    "roleName": "Admin"
                {
            </remarks>
            <response code="200:">Если роль была добавлена</response>
            <response code="400:">Если роль не была добавлена</response>
        </member>
        <member name="T:TrainingProject.Api.Controlers.TokenController">
            <summary>
            
            </summary>
        </member>
        <member name="T:TrainingProject.Api.Middlewares.ExceptionHandlerMiddleware">
            <summary>
            
            </summary>
        </member>
        <member name="M:TrainingProject.Api.Startup.AddAuthenticationAndAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <summary>
            Подключение аутентификации и авторизации
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:TrainingProject.Api.Startup.AddSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Подключение Swagger
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:TrainingProject.api.Controlers.ReportController.GetUserReports(System.Int64)">
            <summary>
            Получение всех отчётов пользователя по его ID
            </summary>
            <param name="userId"></param>
            <returns></returns>
            <remarks>
            Request for get all user's report
            
                GET
                {
                    "userId": 1
                {
            </remarks>
            <response code="200:">Если отчёты пользователя были найдены</response>
            <response code="400:">Если отчёты пользователя не были найдены</response>
        </member>
        <member name="M:TrainingProject.api.Controlers.ReportController.GetReport(System.Int64)">
            <summary>
            Получение одного отчёта по ID
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            Request for get report
            
                GET
                {
                    "id": 1
                {
            </remarks>
            <response code="200:">Если отчёт был найден</response>
            <response code="400:">Если отчёт не был найден</response>
        </member>
        <member name="M:TrainingProject.api.Controlers.ReportController.DeleteReport(System.Int64)">
            <summary>
            Удаление отчёта
            </summary>
            <param name="id"></param>
            <returns></returns>
            <remarks>
            Request for delete report
            
                DELETE
                {
                    "id": 1
                {
            </remarks>
            <response code="200:">Если отчёт был удалён</response>
            <response code="400:">Если отчёт не был удалён</response>
        </member>
        <member name="M:TrainingProject.api.Controlers.ReportController.CreateReport(TrainingProject.Domain.Dto.Report.CreateReportDto)">
            <summary>
            Создание отчёта
            </summary>
            <param name="dto"></param>
            <returns></returns>
            <remarks>
            Request for create report
            
                POST
                {
                    "name": "Report #1",
                    "description": "Test report",
                    "userId": 1
                {
            </remarks>
            <response code="200:">Если отчёт создался</response>
            <response code="400:">Если отчёт не был создан</response>
        </member>
        <member name="M:TrainingProject.api.Controlers.ReportController.UpdateReport(TrainingProject.Domain.Dto.Report.UpdateReportDto)">
            <summary>
            Обновление отчёта
            </summary>
            <param name="dto"></param>
            <returns></returns>
            <remarks>
            Request for update report
            
                PUT
                {
                    "id": 1,
                    "name": "Report name",
                    "description": "Report description"
                {
            </remarks>
            <response code="200:">Если отчёт был обновлён</response>
            <response code="400:">Если отчёт не был обновлён</response>
        </member>
    </members>
</doc>
